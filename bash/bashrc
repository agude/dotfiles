# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# set PATH so it includes user's private bin if it exists
if [[ -d ~/bin ]] ; then
    PATH="${PATH}":~/bin
fi

# If not running interactively, stop now
[[ -z "$PS1" || $- != *i* ]] && return
# When using rsync over ssh to older versions of bash, [[ -z $PS1 ]] returns
# true incorrectly, so we use [[ $- != *i* ]] as a backup

####################### BELOW ONLY RUNS ON PHYSICAL ###########################
# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace

# check the window size after each command and, if necessary, update the values
# of LINES and COLUMNS.
shopt -s checkwinsize &>/dev/null

# autocorrect spelling in cd calls
shopt -s cdspell &>/dev/null

# autocorrect spelling during completion
shopt -s dirspell &>/dev/null

# include dotfiles in pattern matching
shopt -s dotglob &>/dev/null

# enable double-starring paths
shopt -s globstar &>/dev/null

# enable advanced pattern matching
shopt -s extglob &>/dev/null

# turn off mail checking
unset MAILCHECK

# turn off annoying shell beep
hash setterm &>/dev/null && setterm -bfreq 0

# turn off flow control keys
hash stty &>/dev/null && stty -ixon

# make less more friendly for non-text input files, see lesspipe(1)
[[ -x /usr/bin/lesspipe ]] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [[ -z "$debian_chroot" ]] && [[ -r /etc/debian_chroot ]]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# Gnome-terminal sets the wrong term string. Worse the right one doesn't report
# all the features in most distributions, so we set it to xterm-256color and
# hope for the best. This at least makes screen happy.
if [[ "x$COLORTERM" = "xgnome-terminal" ]]; then
    if [[ "x$TERM" == "xxterm" ]]; then
        export TERM=xterm-256color
    fi
fi

## Record the number of colors
hash tput &>/dev/null && COLORS=$(tput colors) && BOLD=$(tput bold) && NORMAL=$(tput sgr0) # Fails when running rsync via ssh to school

# Set colors based on how many we have
if [[ $COLORS -ge 256 ]]; then
    COLOR_DIR='\['$(tput setaf 12)'\]'  # Blue
    COLOR_ROOT='\['$(tput setaf 9)'\]'  # Red
    COLOR_USER='\['$(tput setaf 10)'\]' # Green
    COLOR_SUDO='\['$(tput setaf 11)'\]' # Yellow
    COLOR_SSH='\['$(tput setaf 13)'\]'  # Magenta
    COLOR_UNDO='\[\e[0m\]'
elif [[ $COLORS -ge 8 ]]; then
    COLOR_DIR='\[\e[1;34m\]'  # Blue
    COLOR_ROOT='\[\e[1;31m\]' # Red
    COLOR_USER='\[\e[1;32m\]' # Green
    COLOR_SUDO='\[\e[1;33m\]' # Yellow
    COLOR_SSH='\[\e[1;35m\]'  # Magenta
    COLOR_UNDO='\[\e[0m\]'
else
    COLOR_DIR=
    COLOR_ROOT=
    COLOR_USER=
    COLOR_SUDO=
    COLOR_UNDO=
fi

# Change prompt for root vs. user
if [[ $EUID -eq 0 ]]; then
    PS1=${COLOR_ROOT}'\u@\h'${COLOR_UNDO}':'${COLOR_DIR}'\w'${COLOR_UNDO}'\$ '${COLOR_UNDO}${NORM}
elif [[ -n $SUDO_USER ]]; then
    PS1=${COLOR_SUDO}'\u@\h'${COLOR_UNDO}':'${COLOR_DIR}'\w'${COLOR_UNDO}'\$ '${COLOR_UNDO}${NORM}
elif [[ -n "$SSH_CLIENT" ]]; then
    PS1=${COLOR_SSH}'\u@\h'${COLOR_UNDO}':'${COLOR_DIR}'\w'${COLOR_UNDO}'\$ '${COLOR_UNDO}${NORM}
else
    PS1=${COLOR_USER}'\u@\h'${COLOR_UNDO}':'${COLOR_DIR}'\w'${COLOR_UNDO}'\$ '${COLOR_UNDO}${NORM}
fi

# If debian_chroot is set, display in prompt
PS1='${debian_chroot:+($debian_chroot)}'${PS1}

# If this is an xterm or rxvt set the title to user@host:dir
case "$TERM" in
    xterm*|rxvt*)
        PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
        ;;
    *)
        ;;
esac

# Reset options for ls and grep
GREP_OPTS=

## If we have a color terminal, we'll use color for ls and grep
if [[ $COLORS -ge 8 ]]; then
    hash dircolors &>/dev/null && eval "$(dircolors -b)"
    if grep --help | grep -- --color &>/dev/null; then
        GREP_OPTS="${GREP_OPTS} --color=auto"
    fi
fi

# Set up more options for grep; exclude version control files
if grep --help | grep -- --exclude &>/dev/null; then
    for PATTERN in .git .gitignore .gitmodules; do
        GREP_OPTS="${GREP_OPTS} --exclude=${PATTERN}"
    done
fi
if grep --help | grep -- --exclude-dir &>/dev/null; then
    for PATTERN in .cvs .git .hg .svn; do
        GREP_OPTS="${GREP_OPTS} --exclude-dir=${PATTERN}"
    done
fi

# set options for grep (color, ignore git, etc.)
alias grep="grep ${GREP_OPTS}"
alias fgrep="fgrep ${GREP_OPTS}"
alias egrep="egrep ${GREP_OPTS}"

# enable programmable completion features
if [[ -f /etc/bash_completion ]] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

# Umask to set file permissions on creation
umask 077

# Set editor, but only if we find vi
hash vi &>/dev/null && export EDITOR=vi && export VISUAL=vi

# Set manpage reader to vim
#hash col && hash vim && export MANPAGER="/bin/sh -c \"col -b | vim -c 'set ft=man ts=8 nomod nolist nonu noma' -\""

# Load configuration subfiles
subfile_dir="${HOME}"/.bashrc.d/
if [[ -d ${subfile_dir} ]]; then
    for config in ${subfile_dir}/*.bash; do
        source "${config}"
    done
fi
# Unset variables to avoid polluting our shell's namespace
unset -v config
unset -v subfile_dir
